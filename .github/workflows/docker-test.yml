name: Docker Compatibility Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-docker:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux variants
          - os: ubuntu-latest
            name: "Ubuntu Latest"
          - os: ubuntu-20.04
            name: "Ubuntu 20.04"
          
          # macOS variants  
          - os: macos-latest
            name: "macOS Latest (Intel)"
          - os: macos-13
            name: "macOS 13 (Intel)"
            
          # Windows with WSL
          - os: windows-latest
            name: "Windows (WSL2)"
    
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Linux setup (already has Docker)
      - name: Setup Docker on Linux
        if: runner.os == 'Linux'
        run: |
          docker --version
          docker compose version || docker-compose --version
      
      # macOS setup - using colima as Docker Desktop alternative
      - name: Setup Docker on macOS
        if: runner.os == 'macOS'
        run: |
          # Install Docker and Colima
          brew install docker docker-compose colima
          
          # Start Colima with QEMU driver (more compatible with GitHub Actions)
          # VZ driver doesn't work well in GitHub Actions
          colima start --runtime docker --cpu 2 --memory 4 --disk 10 --vm-type qemu --arch aarch64
          
          # Wait for Docker to be ready
          for i in {1..30}; do
            if docker info >/dev/null 2>&1; then
              echo "Docker is ready"
              break
            fi
            echo "Waiting for Docker to start... ($i/30)"
            sleep 2
          done
          
          # Verify installation
          docker --version
          docker-compose --version
      
      # Windows setup
      - name: Setup Docker on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          docker --version
          docker-compose --version
      
      # Create test environment
      - name: Setup test environment
        shell: bash
        run: |
          # Create .env from example
          cp .env.example .env
          
          # Add test API key (or use secret if available)
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          else
            echo "OPENAI_API_KEY=sk-test-key-for-ci-only" >> .env
          fi
          
          # Show environment info
          echo "Platform: $(uname -s)"
          echo "Architecture: $(uname -m)"
      
      # Validate Docker Compose configuration
      - name: Validate configuration
        shell: bash
        run: |
          echo "Validating Docker Compose configuration..."
          docker-compose config > /dev/null && echo "✓ Configuration is valid" || exit 1
      
      # Test quick startup and shutdown
      - name: Test Docker Compose up/down
        shell: bash
        timeout-minutes: 15
        run: |
          echo "Starting services..."
          docker-compose up -d postgres redis
          
          echo "Waiting for services to start..."
          # Wait longer for services to be fully ready
          attempts=0
          max_attempts=30
          until docker-compose exec -T postgres pg_isready -U pharmaiq >/dev/null 2>&1; do
            if [ $attempts -eq $max_attempts ]; then
              echo "✗ PostgreSQL failed to start"
              docker-compose logs postgres
              exit 1
            fi
            echo "Waiting for PostgreSQL... ($attempts/$max_attempts)"
            sleep 2
            attempts=$((attempts + 1))
          done
          
          echo "✓ PostgreSQL is ready"
          
          echo "Checking service status..."
          docker-compose ps
          
          echo "Stopping services..."
          docker-compose down -v
          
          echo "✓ Basic Docker Compose test passed"
      
      # Full stack test (optional - takes longer)
      - name: Full stack test
        if: matrix.os == 'ubuntu-latest'  # Only run on one platform to save time
        shell: bash
        timeout-minutes: 20
        run: |
          echo "Starting full stack..."
          docker-compose up -d
          
          # Wait for services
          echo "Waiting for services to be ready..."
          attempts=0
          max_attempts=60
          
          while [ $attempts -lt $max_attempts ]; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✓ Web service is ready"
              break
            fi
            echo "Waiting for web service... ($attempts/$max_attempts)"
            sleep 5
            attempts=$((attempts + 1))
          done
          
          # Test endpoints
          curl -f http://localhost:3000 && echo "✓ Frontend accessible" || echo "✗ Frontend not accessible"
          curl -f http://localhost:3001/health && echo "✓ API accessible" || echo "✗ API not accessible"
          
          # Cleanup
          docker-compose down -v
      
      # Collect debug info on failure
      - name: Debug info on failure
        if: failure()
        shell: bash
        run: |
          echo "=== Docker Info ==="
          docker info || true
          
          echo "=== Docker Compose Version ==="
          docker-compose --version || true
          
          echo "=== Docker Compose Logs ==="
          docker-compose logs --tail=50 || true
          
          echo "=== Running Containers ==="
          docker ps -a || true
      
      # Cleanup
      - name: Cleanup
        if: always()
        shell: bash
        run: |
          docker-compose down -v || true
          
          # Stop Colima on macOS
          if [ "${{ runner.os }}" == "macOS" ]; then
            colima stop || true
          fi

  # Architecture compatibility check
  architecture-test:
    runs-on: ubuntu-latest
    name: Architecture Compatibility
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check multi-architecture support
        run: |
          echo "## Checking Docker image architecture support"
          echo ""
          echo "| Image | x86_64 | arm64 |"
          echo "|-------|--------|-------|"
          
          # Check each image
          for image in node:20-alpine pgvector/pgvector:pg15 redis:7-alpine elasticsearch:8.11.0; do
            echo -n "| $image "
            
            # Check x86_64
            if docker manifest inspect $image 2>/dev/null | grep -q "amd64\|x86_64"; then
              echo -n "| ✅ "
            else
              echo -n "| ❌ "
            fi
            
            # Check arm64
            if docker manifest inspect $image 2>/dev/null | grep -q "arm64\|aarch64"; then
              echo "| ✅ |"
            else
              echo "| ❌ |"
            fi
          done